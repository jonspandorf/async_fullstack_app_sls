service: 'fullstack-async-serverless-app'
provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: ${env:AWS_REGION}
  environment:
    ARTIFACTS_BUCKET: ${env:ARTIFACTS_BUCKET}
    FRONTEND_BUCKET: ${env:FRONTEND_BUCKET}
  ecr:
    images:
      fullstack_async_worker:
        path: ./worker

plugins:
  - serverless-iam-roles-per-function

resources:
  - ${file(./resources/misc.yaml)}
  - ${file(./resources/cloudfront.yaml)}
      
functions:
  uploadHandler: 
    name: FullstackAsyncUploader-${self:provider.stage}
    handler: uploader/main.lambda_handler
    environment:
      QUEUE_URL:
        Fn::GetAtt:
          - WorkerBroker
          - QueueUrl
      BUCKET_NAME: ${self:provider.environment.ARTIFACTS_BUCKET}
    iamRoleStatements: 
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
      - 'Fn::Join':
          - ':'
          - - 'arn:aws:logs'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'log-group:/aws/lambda/*:*:*'
    - Effect: Allow
      Action: sqs:SendMessage
      Resource: !GetAtt WorkerBroker.Arn
    - Effect: Allow
      Action: s3:PutObject
      Resource: arn:aws:s3:::${self:provider.environment.ARTIFACTS_BUCKET}/*

    events:
      - http:
          method: get
          path: /api/upload
          cors: true

  workerHandler: 
    image:
      name: fullstack_async_worker
    name: FullstackAsyncWorker-${self:provider.stage}
    environment:
      BUCKET_NAME: ${self:provider.environment.ARTIFACTS_BUCKET}
      QUEUE_URL:
        Fn::GetAtt:
          - WorkerBroker
          - QueueUrl
    timeout: 60
    iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:logs'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'log-group:/aws/lambda/*:*:*'
    - Effect: Allow
      Action: execute-api:ManageConnections
      Resource: arn:aws:execute-api:*:*:**/@connections/*
    - Effect: Allow
      Action: 
        - "s3:ListBucket"
        - "s3:GetObject"
        - "s3:DeleteObject"
        - "s3:HeadObject"
        - "s3:PutObject"
      Resource: "*"
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - WorkerBroker
              - Arn

  checkerHandler: 
    name: FullstackAsyncChecker-${self:provider.stage}
    handler: checker/main.lambda_handler
    environment:
      BUCKET_NAME: ${self:provider.environment.ARTIFACTS_BUCKET}
      WEBSOCKET_API:
        Fn::Join:
          - ''
          - - 'https://'
          # The following is an AWS variable Ref to the API Id 
            - Ref: WebsocketsApi
            - '.execute-api.'
            - Ref: AWS::Region
            - '.amazonaws.com/'
            - ${self:provider.stage}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:logs'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'log-group:/aws/lambda/*:*:*'
    - Effect: Allow
      Action: execute-api:ManageConnections
      Resource: arn:aws:execute-api:*:*:**/@connections/*
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
        - s3:ListBucket
        - s3:HeadObject
      Resource: "*"
    - Effect: Allow
      Action: 
        - sqs:DeleteMessage
        - sqs:ReceiveMessage
        - sqs:GetQueueAttributes
      Resource: !GetAtt WorkerBroker.Arn
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: onCheck
